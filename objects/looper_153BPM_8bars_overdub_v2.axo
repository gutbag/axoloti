<objdefs appVersion="1.0.12">
   <obj.normal id="looper_153BPM_8bars_overdub_v2" uuid="010efc20-bbd5-4d66-bdbc-e73c64c6b0d0">
      <sDescription>Moagulum main theme argpeggios + overdubbed hocket section. Records 8 bars then overdubs 8 bars then plays repeatedly. Version 2 has direct MIDI trigger and knows the Moagulum states.</sDescription>
      <author>Mark Lamb</author>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <frac32buffer name="overdub"/>
         <bool32.rising name="trigger"/>
         <bool32.rising name="reset"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <bool32 name="recording"/>
         <bool32 name="overdubbing"/>
         <bool32 name="playing"/>
      </outlets>
      <displays>
         <bool32 name="reset"/>
         <bool32 name="recording"/>
         <bool32 name="overdubbing"/>
         <bool32 name="playing"/>
         <bool32 name="readyToPlay"/>
      </displays>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[static const uint32_t BPM = 153;
static const uint32_t BARS = 8;
static const uint32_t BEATS_TO_BAR = 4;
static const uint32_t BEATS = BARS * BEATS_TO_BAR;
static constexpr double SAMPLE_PERIOD = 1.0 / 48000.0;
static const uint32_t LENGTH = ((60.0 / BPM) * BEATS) / SAMPLE_PERIOD;

// use each fade value n times to slow down the fade
static const uint32_t SAMPLES_PER_FADE = 50;
static const uint32_t NUM_FADE_VALUES = 192;

int32_t* array;
uint32_t writepos;
uint32_t readpos;

typedef enum {INIT, RESET, RECORDING, OVERDUBBING, PLAYING, FADE_BEFORE_READY, READY_TO_PLAY} State;
State state;

typedef enum {NONE, START_RECORDING, PLAY, STOP, CLEAR} Event;
Event event;

void clearArray()
{
	for (int i=0; i<LENGTH; i++)
		array[i] = 0;
}

//#include "../objects/Fader.h"

///**
// * Handles fading down when playing is stopped. Allows multiple samples
// * for each fade index.
// */
//class Fader
//{
//public:
//	Fader(const uint32_t aNumFadeSamples, const uint32_t aSamplesPerFadeIndex)
//	: numFadeSamples(aNumFadeSamples), samplesPerFadeIndex(aSamplesPerFadeIndex)
//	{
//		init();
//	}
//	~Fader() {}
//
//	void init()
//	{
//		fadeIndex = numFadeSamples - 1;
//		samplesPerFadeCounter = samplesPerFadeIndex;
//
//		LogTextMessage("Fader::init\n");
//	}
//
//	uint32_t getFadeIndex() const
//	{
//		return fadeIndex;
//	}
//
//	void next()
//	{
//		--samplesPerFadeCounter;
//		if (samplesPerFadeCounter == 0) // move to the next fade index
//		{
//			--fadeIndex;
//			samplesPerFadeCounter = samplesPerFadeIndex;
//		}
//
//		if (finished())
//			LogTextMessage("Fader finished\n");
//	}
//
//	bool finished() const
//	{
//		return fadeIndex == 0;
//	}
//
//private:
//	uint32_t numFadeSamples;
//	uint32_t samplesPerFadeIndex;
//	uint32_t fadeIndex;
//	uint32_t samplesPerFadeCounter;
//};


/**
 * Calculates and returns the sample value to be used, given the index and its 
 * position within min/max, applying the appropriate fade value if necessary.
 */
int32_t calcSampleValue(const int32_t rawValue, const uint32_t index, const uint32_t minIndex, const uint32_t maxIndex)
{
	// 2147483632 is a gain of 1
	static const uint32_t FADE_VALUES[NUM_FADE_VALUES] = {
	0, 11184811, 22369621, 33554432, 44739242, 55924053, 67108864, 78293674, 89478485, 100663295, 111848106, 123032916, 134217727, 145402538, 156587348, 167772159, 
	178956969, 190141780, 201326591, 212511401, 223696212, 234881022, 246065833, 257250643, 268435454, 279620265, 290805075, 301989886, 313174696, 324359507, 335544318, 
	346729128, 357913939, 369098749, 380283560, 391468370, 402653181, 413837992, 425022802, 436207613, 447392423, 458577234, 469762045, 480946855, 492131666, 503316476, 
	514501287, 525686097, 536870908, 548055719, 559240529, 570425340, 581610150, 592794961, 603979772, 615164582, 626349393, 637534203, 648719014, 659903824, 671088635, 
	682273446, 693458256, 704643067, 715827877, 727012688, 738197499, 749382309, 760567120, 771751930, 782936741, 794121551, 805306362, 816491173, 827675983, 838860794, 
	850045604, 861230415, 872415226, 883600036, 894784847, 905969657, 917154468, 928339278, 939524089, 950708900, 961893710, 973078521, 984263331, 995448142, 1006632953, 
	1017817763, 1029002574, 1040187384, 1051372195, 1062557005, 1073741816, 1084926627, 1096111437, 1107296248, 1118481058, 1129665869, 1140850680, 1152035490, 1163220301, 
	1174405111, 1185589922, 1196774732, 1207959543, 1219144354, 1230329164, 1241513975, 1252698785, 1263883596, 1275068407, 1286253217, 1297438028, 1308622838, 1319807649, 
	1330992459, 1342177270, 1353362081, 1364546891, 1375731702, 1386916512, 1398101323, 1409286134, 1420470944, 1431655755, 1442840565, 1454025376, 1465210186, 1476394997, 
	1487579808, 1498764618, 1509949429, 1521134239, 1532319050, 1543503861, 1554688671, 1565873482, 1577058292, 1588243103, 1599427913, 1610612724, 1621797535, 1632982345, 
	1644167156, 1655351966, 1666536777, 1677721588, 1688906398, 1700091209, 1711276019, 1722460830, 1733645640, 1744830451, 1756015262, 1767200072, 1778384883, 1789569693, 
	1800754504, 1811939315, 1823124125, 1834308936, 1845493746, 1856678557, 1867863367, 1879048178, 1890232989, 1901417799, 1912602610, 1923787420, 1934972231, 1946157042, 
	1957341852, 1968526663, 1979711473, 1990896284, 2002081094, 2013265905, 2024450716, 2035635526, 2046820337, 2058005147, 2069189958, 2080374769, 2091559579, 2102744390, 
	2113929200, 2125114011, 2136298821 };

	if (index < minIndex + NUM_FADE_VALUES)
		return __SSAT(___SMMUL(FADE_VALUES[index-minIndex],__SSAT(rawValue,28))<<1,28);
	else if (index > maxIndex - NUM_FADE_VALUES)
		return __SSAT(___SMMUL(FADE_VALUES[maxIndex-index],__SSAT(rawValue,28))<<1,28);
	else
		return rawValue;
}]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];

clearArray();

writepos = 0;
readpos = 0;

state = INIT;
event = NONE;


//LogTextMessage("Init looper_153BPM_8bars_overdub_v2\n");]]></code.init>
      <code.krate><![CDATA[if (inlet_reset && state != RESET)
{
	//LogTextMessage("CLEAR\n");
	event = CLEAR;
}
else if (inlet_trigger && state == RESET)
{
	//LogTextMessage("START_RECORDING\n");
	event = START_RECORDING;
}
else if (inlet_trigger && (state == RECORDING || state == OVERDUBBING || state == PLAYING))
{
	//LogTextMessage("STOP\n");
	event = STOP;
}
else if (inlet_trigger && state == READY_TO_PLAY)
{
	//LogTextMessage("PLAY\n");
	event = PLAY;
}]]></code.krate>
      <code.srate><![CDATA[#include "../objects/Fader.h"
static Fader fader(NUM_FADE_VALUES, SAMPLES_PER_FADE);

switch (state)
{
	case INIT: // entered only once on startup
		state = RESET;
	break;
	case RESET: // wait to start recording
		switch (event)
		{
			case START_RECORDING:
				state = RECORDING;
				writepos = 0;
			break;
			case PLAY:
				// ignore
			break;
			case STOP:
				// ignore
			break;
			case CLEAR:
				// ignore
			break;
			case NONE:
				outlet_out = 0; // no output
			break;
		}
	break;
	case RECORDING: // record until full then overdub
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case PLAY:
				// ignore
			break;
			case STOP: // stop and clear handled together
			case CLEAR:
				state = RESET;
			break;
			case NONE:
				array[writepos] = inlet_in;
				outlet_out = 0; // no output
				++writepos;
				if (writepos >= LENGTH)
				{
					state = OVERDUBBING; // go to this state directly
					writepos = 0;
				}
			break;
		}
	break;
	case OVERDUBBING: // overdub until full then play
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case PLAY:
				// ignore
			break;
			case STOP:
			case CLEAR:
				state = RESET;
			break;
			case NONE:
				outlet_out = calcSampleValue(array[writepos], writepos, 0, LENGTH); // copy previous sample to output
				array[writepos] = __SSAT(inlet_overdub + array[writepos], 28); // mix with existing value in array
				++writepos;
				if (writepos >= LENGTH)
				{
					state = PLAYING; // go to this state directly
					readpos = 0;
				}
			break;
		}
	break;
	case PLAYING: // keep playing until stopped
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case PLAY:
				// ignore
			break;
			case STOP:
				fader.init();
				state = FADE_BEFORE_READY;
			break;
			case CLEAR:
				state = RESET;
			break;
			case NONE:
				outlet_out = calcSampleValue(array[readpos], readpos, 0, LENGTH);
				++readpos;
				if (readpos >= LENGTH) // for now, repeat loop forever
					readpos = 0;
			break;
		}
	break;
	case FADE_BEFORE_READY: // fade down
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case PLAY:
				// ignore
			break;
			case STOP:
				// ignore
			break;
			case CLEAR:
				state = RESET;
			break;
			case NONE:
				outlet_out = calcSampleValue(array[readpos], fader.getFadeIndex(), 0, LENGTH);
				if (fader.finished()) // done the last sample, finished fading
				{
					state = READY_TO_PLAY;
				}
				else
				{
					fader.next();
					++readpos;
					if (readpos >= LENGTH) // may need to wrap to start
						readpos = 0;
				}
			break;
		}
	break;
	case READY_TO_PLAY: // already got audio
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case PLAY:
				state = PLAYING;
				readpos = 0;
			break;
			case STOP:
				// ignore
			break;
			case CLEAR:
				state = RESET;
			break;
			case NONE:
				outlet_out = 0; // no output
			break;
		}
	break;
}

// consume the event
event = NONE;

// update the displays and output flags
switch (state)
{
	case INIT: // shouldn't happen, we go straight to reset
		disp_reset = 0;
		outlet_recording = 0;
		disp_recording = 0;
		outlet_overdubbing = 0;
		disp_overdubbing = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_readyToPlay = 0;
	break;
	case RESET:
		disp_reset = 1;
		outlet_recording = 0;
		disp_recording = 0;
		outlet_overdubbing = 0;
		disp_overdubbing = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_readyToPlay = 0;
	break;
	case RECORDING:
		disp_reset = 0;
		outlet_recording = 1;
		disp_recording = 1;
		outlet_overdubbing = 0;
		disp_overdubbing = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_readyToPlay = 0;
	break;
	case OVERDUBBING:
		disp_reset = 0;
		outlet_recording = 0;
		disp_recording = 0;
		outlet_overdubbing = 1;
		disp_overdubbing = 1;
		outlet_playing = 0;
		disp_playing = 0;
		disp_readyToPlay = 0;
	break;
	case PLAYING:
		disp_reset = 0;
		outlet_recording = 0;
		disp_recording = 0;
		outlet_overdubbing = 0;
		disp_overdubbing = 0;
		outlet_playing = 1;
		disp_playing = 1;
		disp_readyToPlay = 0;
	break;
	case READY_TO_PLAY:
		disp_reset = 0;
		outlet_recording = 0;
		disp_recording = 0;
		outlet_overdubbing = 0;
		disp_overdubbing = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_readyToPlay = 1;
	break;
}]]></code.srate>
   </obj.normal>
</objdefs>