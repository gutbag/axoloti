<objdefs appVersion="1.0.12">
   <obj.normal id="Stutter" uuid="fea1663b-4430-4abc-aeb3-91b091e2b6db">
      <sDescription>Stutter effect with knowledge of tempo and providing a selection of stutter patterns and lengths.</sDescription>
      <author>Mark Lamb</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <bool32.rising name="trigger"/>
         <int32.positive name="BPM"/>
         <int32.positive name="beatsToBar"/>
         <int32.positive name="numPeriods"/>
         <int32.positive name="pattern"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <bool32 name="on"/>
      </outlets>
      <displays>
         <bool32 name="on" noLabel="true"/>
         <bool32 name="block"/>
      </displays>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[static constexpr double SAMPLE_PERIOD = 1.0 / 48000.0;

typedef enum {INIT, IDLE, RUNNING} State;
State state;

typedef enum {NONE, START, STOP} Event;
Event event;

struct Period
{
	uint32_t id; // helps with debugging
	uint32_t startIndex;
	uint32_t endIndex; // inclusive, always higher than startIndex
	bool on; // false for off
	Period* previous;
	Period* next;
};

static const uint32_t MAX_PERIODS = 64;
Period periods[MAX_PERIODS];

uint32_t bpm;
uint32_t beatsToBar;
uint32_t samplesPerBar;
uint32_t samplesPerBeat;

uint32_t numPeriodsSelected;
uint32_t patternType;

// playback variables
Period* currentPeriod; // head of linked list
uint32_t currentSampleIndex;

/**
 * Setup the periods with their start and end indexes, given the settings.
 */
void populatePeriods(const uint32_t numPeriods, const uint32_t samplesPerPeriod)
{
	uint32_t index = 0;
	
	for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
	{
		periods[periodIndex].id = periodIndex;
		periods[periodIndex].startIndex = index;
		periods[periodIndex].endIndex = index + samplesPerPeriod - 1;
		index += samplesPerPeriod;
	}
	// set next and previous
	for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
	{
		periods[periodIndex].next = periodIndex < (numPeriods-1) ? &periods[periodIndex+1] : &periods[0];
		periods[periodIndex].previous = periodIndex > 0 ? &periods[periodIndex-1] : &periods[numPeriods-1];
	}
}

/**
 * Set the periods' on/off state depending on the current pattern
 */
void configurePeriods(const uint32_t numPeriods, const uint32_t pattern)
{
	switch (pattern)
	{
	case 1: // on every other period
		for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
		{
		   periods[periodIndex].on = (periodIndex % 2 == 0);
		}
	break;
	case 2: // 1 on, 2 off, 3 on, 1 off
	{
		uint32_t onOff[] = {1, 0, 0, 1, 1, 1, 0};
		uint32_t onOffIndex = 0;
		for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
		{
		   periods[periodIndex].on = onOff[onOffIndex] == 1 ? true : false;
		   onOffIndex++;
		   if (onOffIndex >= sizeof(onOff)/sizeof(uint32_t))
		   	onOffIndex = 0;
		}
	}
	break;
	case 3:
	{
		uint32_t onOff[] = {1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0};
		uint32_t onOffIndex = 0;
		for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
		{
		   periods[periodIndex].on = onOff[onOffIndex] == 1 ? true : false;
		   onOffIndex++;
		   if (onOffIndex >= sizeof(onOff)/sizeof(uint32_t))
		   	onOffIndex = 0;
		}
	}
	break;
	default:
	break;
	}
}

void dumpPeriods(const uint32_t numPeriods)
{
    for (uint32_t periodIndex=0; periodIndex<numPeriods; periodIndex++)
    {
		LogTextMessage("period[%u] %x id %u start %u end %u on %u next %u/%x previous %u/%x\n",
			periodIndex,
			&periods[periodIndex],
			periods[periodIndex].id,
			periods[periodIndex].startIndex,
        		periods[periodIndex].endIndex,
        		periods[periodIndex].on,
        		periods[periodIndex].next->id,
        		periods[periodIndex].next,
        		periods[periodIndex].previous->id,
        		periods[periodIndex].previous
        	);
    }
}

/**
 * Calculates and returns the sample value to be used, given the index and its 
 * position within the period's min/max, applying the appropriate fade value if 
 * necessary.
 */
int32_t calcSampleValue(const int32_t rawValue, const uint32_t index, const Period& period)
{
	// 2147483632 is a gain of 1
	static const uint32_t NUM_FADE_VALUES = 192;
	static const uint32_t FADE_VALUES[NUM_FADE_VALUES] = {
	0, 11184811, 22369621, 33554432, 44739242, 55924053, 67108864, 78293674, 89478485, 100663295, 111848106, 123032916, 134217727, 145402538, 156587348, 167772159, 
	178956969, 190141780, 201326591, 212511401, 223696212, 234881022, 246065833, 257250643, 268435454, 279620265, 290805075, 301989886, 313174696, 324359507, 335544318, 
	346729128, 357913939, 369098749, 380283560, 391468370, 402653181, 413837992, 425022802, 436207613, 447392423, 458577234, 469762045, 480946855, 492131666, 503316476, 
	514501287, 525686097, 536870908, 548055719, 559240529, 570425340, 581610150, 592794961, 603979772, 615164582, 626349393, 637534203, 648719014, 659903824, 671088635, 
	682273446, 693458256, 704643067, 715827877, 727012688, 738197499, 749382309, 760567120, 771751930, 782936741, 794121551, 805306362, 816491173, 827675983, 838860794, 
	850045604, 861230415, 872415226, 883600036, 894784847, 905969657, 917154468, 928339278, 939524089, 950708900, 961893710, 973078521, 984263331, 995448142, 1006632953, 
	1017817763, 1029002574, 1040187384, 1051372195, 1062557005, 1073741816, 1084926627, 1096111437, 1107296248, 1118481058, 1129665869, 1140850680, 1152035490, 1163220301, 
	1174405111, 1185589922, 1196774732, 1207959543, 1219144354, 1230329164, 1241513975, 1252698785, 1263883596, 1275068407, 1286253217, 1297438028, 1308622838, 1319807649, 
	1330992459, 1342177270, 1353362081, 1364546891, 1375731702, 1386916512, 1398101323, 1409286134, 1420470944, 1431655755, 1442840565, 1454025376, 1465210186, 1476394997, 
	1487579808, 1498764618, 1509949429, 1521134239, 1532319050, 1543503861, 1554688671, 1565873482, 1577058292, 1588243103, 1599427913, 1610612724, 1621797535, 1632982345, 
	1644167156, 1655351966, 1666536777, 1677721588, 1688906398, 1700091209, 1711276019, 1722460830, 1733645640, 1744830451, 1756015262, 1767200072, 1778384883, 1789569693, 
	1800754504, 1811939315, 1823124125, 1834308936, 1845493746, 1856678557, 1867863367, 1879048178, 1890232989, 1901417799, 1912602610, 1923787420, 1934972231, 1946157042, 
	1957341852, 1968526663, 1979711473, 1990896284, 2002081094, 2013265905, 2024450716, 2035635526, 2046820337, 2058005147, 2069189958, 2080374769, 2091559579, 2102744390, 
	2113929200, 2125114011, 2136298821 };

	if (not period.on)
	{
		return 0;
	}
	else // on but may need to fade in/out, depending on next/previous period
	{
		if (index < period.startIndex + NUM_FADE_VALUES) // at start
		{
			if (period.previous->on) // don't need to fade up
				return rawValue;
			else // fade up
				return __SSAT(___SMMUL(FADE_VALUES[index-period.startIndex],__SSAT(rawValue,28))<<1,28);
		}
		else if (index > period.endIndex - NUM_FADE_VALUES) // at end
		{
			if (period.next->on) // don't need to fade down
				return rawValue;
			else
				return __SSAT(___SMMUL(FADE_VALUES[period.endIndex-index],__SSAT(rawValue,28))<<1,28);
		}
		else
			return rawValue;
	}
}]]></code.declaration>
      <code.init><![CDATA[currentSampleIndex = 0;

state = INIT;
event = NONE;

LogTextMessage("Init done\n");

srand(0);]]></code.init>
      <code.krate><![CDATA[if (inlet_trigger && state == IDLE)
{
	LogTextMessage("START\n");
	event = START;
}
else if (inlet_trigger && state == RUNNING)
{
	LogTextMessage("STOP\n");
	event = STOP;
}]]></code.krate>
      <code.srate><![CDATA[switch (state)
{
	case INIT:
		if (inlet_BPM == 0) // it takes ~17 S-rate calls before inlets are available
			break;
		
		bpm = inlet_BPM;
		beatsToBar = inlet_beatsToBar;
		numPeriodsSelected = inlet_numPeriods;
		patternType = inlet_pattern;

		if (numPeriodsSelected < 1)
			numPeriodsSelected = 1;
		if (numPeriodsSelected > MAX_PERIODS)
			numPeriodsSelected = MAX_PERIODS;

		samplesPerBeat = (60.0 / bpm) / SAMPLE_PERIOD;
		samplesPerBar = samplesPerBeat * beatsToBar;

		LogTextMessage("bpm %u beats/bar %u periods %u pattern %u samples/bar %u samples/beat %u\n",
			bpm, beatsToBar, numPeriodsSelected, patternType, samplesPerBar, samplesPerBeat);

		populatePeriods(numPeriodsSelected, samplesPerBar/numPeriodsSelected);
		configurePeriods(numPeriodsSelected, patternType);
	
		dumpPeriods(numPeriodsSelected);
		
		state = IDLE;

	break;
	case IDLE: // wait to start running
		switch (event)
		{
			case START:
				state = RUNNING;
				currentPeriod = &periods[0];
				currentSampleIndex = 0;
			break;
			case STOP:
				// ignore
			break;
			case NONE:
				outlet_out = inlet_in; // copy input to output
			break;
		}
	break;
	case RUNNING: // keep running until stopped
		switch (event)
		{
			case START:
				// ignore
			break;
			case STOP:
				state = IDLE;
				outlet_out = inlet_in;
			break;
			case NONE:

				// get current sample value, move to next one, check for end and repeat
				outlet_out = calcSampleValue(inlet_in, 
			            currentSampleIndex, 
			            *currentPeriod);

			     // update the display
			     disp_block = currentPeriod->on;
			
				currentSampleIndex++;
				if (currentSampleIndex > currentPeriod->endIndex) // finished this period
				{
					LogTextMessage("Finished period %u on %d\n", currentPeriod->id, currentPeriod->on);

					currentPeriod = currentPeriod->next;
					if (currentPeriod->id == 0)
					{
						currentSampleIndex = 0;
					}
				}
			break;
		}
	break;
}

// consume the event
event = NONE;

// update the displays and output flags
switch (state)
{
	case IDLE:
		outlet_on = 0;
		disp_on = 0;
	break;
	case RUNNING:
		outlet_on = 1;
		disp_on = 1;
	break;
}]]></code.srate>
   </obj.normal>
</objdefs>