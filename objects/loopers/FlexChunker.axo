<objdefs appVersion="1.0.12">
   <obj.normal id="FlexChunker" uuid="d2c3bc98-d2c4-4b85-8134-97f2980117bf">
      <sDescription>Looper that records n bars then plays back subsections out of sequence. Overall duration of loop defined by external start/stop triggers.</sDescription>
      <author>Mark Lamb</author>
      <license></license>
      <inlets>
         <frac32buffer name="in" description="wave input"/>
         <bool32.rising name="trigger"/>
         <bool32.rising name="reset"/>
         <int32.positive name="type"/>
         <int32.positive name="numChunks"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <bool32 name="recording"/>
         <bool32 name="playing"/>
      </outlets>
      <displays>
         <bool32 name="reset"/>
         <bool32 name="recording"/>
         <bool32 name="playing"/>
      </displays>
      <params/>
      <attribs>
         <spinner name="MaxTimeSecs" MinValue="2" MaxValue="32" DefaultValue="16"/>
      </attribs>
      <code.declaration><![CDATA[static constexpr double SAMPLE_PERIOD = 1.0 / 48000.0;
static const uint32_t MAX_SAMPLE_TIME_S = attr_MaxTimeSecs;
static const uint32_t MIN_SAMPLE_TIME_S = 1;
static const uint32_t MIN_SAMPLES = MIN_SAMPLE_TIME_S / SAMPLE_PERIOD;
static const uint32_t SAMPLE_ARRAY_LENGTH = MAX_SAMPLE_TIME_S / SAMPLE_PERIOD;
static const uint32_t NUM_REORDER_TYPES = 8;

int32_t* sampleArray;
uint32_t sampleWriteIndex;
uint32_t sampleEndIndex;

typedef enum {INIT, RESET, RECORDING, PLAYING} State;
State state;

typedef enum {NONE, START_RECORDING, STOP, CLEAR} Event;
Event event;

struct Chunk
{
    uint32_t startIndex;
    uint32_t endIndex; // inclusive, always higher than startIndex
    bool forward; // false for reverse
};

static const uint32_t MAX_CHUNKS = 64;
Chunk chunks[MAX_CHUNKS];
uint32_t chunkIndexes[MAX_CHUNKS];

// the actual chunk settings used
uint32_t numChunksSelected;
uint32_t chunkLengthSelected;

// playback variables
uint32_t currentChunkIndex;
uint32_t currentSampleIndex;

uint32_t reorderType;

/**
 * Sets all sample values to 0.
 */
void clearSampleArray()
{
	sampleEndIndex = 0;
	for (int i=0; i<SAMPLE_ARRAY_LENGTH; i++)
		sampleArray[i] = 0;
}

/**
 * Setup the chunks with their start and end indexes, given the chunk settings.
 */
void populateChunks(const uint32_t numChunks, const uint32_t chunkLength)
{
    uint32_t index = 0;

    for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
    {
        chunks[chunkIndex].startIndex = index;
        chunks[chunkIndex].endIndex = index + chunkLength - 1;
        index += chunkLength;
    }
}

/**
 * Create the chunk index array depending on the type.
 * When adding a new one, change NUM_REORDER_TYPES.
 */
void reorderChunks(const uint32_t numChunks, const uint32_t type)
{
	switch (type)
	{
	case 1: // each chunk in order, every other one reversed.
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		{
		   chunkIndexes[chunkIndex] = chunkIndex;
		   chunks[chunkIndex].forward = (chunkIndex % 2 == 0); // reverse every other chunk (TODO - depends on selected mode)
		}
	break;
	case 2: // chunks in order but randomly reversed
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		{
		   chunkIndexes[chunkIndex] = chunkIndex;
		   chunks[chunkIndex].forward = (rand() < RAND_MAX/2);
		}
	break;
	case 3: // chunks in reverse order but played forward
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		{
		   chunkIndexes[chunkIndex] = (numChunks - chunkIndex) - 1;
		   chunks[chunkIndex].forward = true;
		}
	break;
	case 4: // chunks in reverse order but randomly reversed
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		{
		   chunkIndexes[chunkIndex] = (numChunks - chunkIndex) - 1;
		   chunks[chunkIndex].forward = (rand() < RAND_MAX/2);
		}
	break;
	case 5: // chunks in random order and randomly reversed
	{
		uint32_t tmpChunkIndexes[MAX_CHUNKS];
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		   tmpChunkIndexes[chunkIndex] = chunkIndex;

		uint32_t tmpChunksLeft = numChunks;
		uint32_t chunkIndex = 0;
		uint32_t forwardCount = 0;
		uint32_t reverseCount = 0;
		while (tmpChunksLeft > 0)
		{
			// choose an index from the ones left
			uint32_t randChunkIndex = tmpChunksLeft > 1 ? rand() % (tmpChunksLeft - 1) : 0;
			// store it
			chunkIndexes[chunkIndex] = tmpChunkIndexes[randChunkIndex];
			chunks[chunkIndex].forward = (rand() < RAND_MAX/2);
			if (chunks[chunkIndex].forward)
			{
				reverseCount = 0;
				forwardCount++;
				if (forwardCount >= 2)
				{
					chunks[chunkIndex].forward = false;
					forwardCount = 0;
				}
			}
			else
			{
				forwardCount = 0;
				reverseCount++;
				if (reverseCount >= 2)
				{
					chunks[chunkIndex].forward = true;
					reverseCount = 0;
				}
			}
			// shuffle the indexes above down one
			for (uint32_t i=randChunkIndex; i<tmpChunksLeft; i++)
				tmpChunkIndexes[i] = tmpChunkIndexes[i+1]; // doesn't matter if we go off the end
			tmpChunksLeft--;
			chunkIndex++;
		}
	}
	break;
	case 6: // chunks in random order but all played forward
	case 8: // chunks in random order but all played reversed
	{
		uint32_t tmpChunkIndexes[MAX_CHUNKS];
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		   tmpChunkIndexes[chunkIndex] = chunkIndex;

		uint32_t tmpChunksLeft = numChunks;
		uint32_t chunkIndex = 0;
		while (tmpChunksLeft > 0)
		{
			// choose an index from the ones left
			uint32_t randChunkIndex = tmpChunksLeft > 1 ? rand() % (tmpChunksLeft - 1) : 0;
			// store it
			chunkIndexes[chunkIndex] = tmpChunkIndexes[randChunkIndex];
			chunks[chunkIndex].forward = type == 6; // reverse if 8
			// shuffle the indexes above down one
			for (uint32_t i=randChunkIndex; i<tmpChunksLeft; i++)
				tmpChunkIndexes[i] = tmpChunkIndexes[i+1]; // doesn't matter if we go off the end
			tmpChunksLeft--;
			chunkIndex++;
		}
	}
	break;
	case 7: // chunks in order but all reversed
		for (uint32_t chunkIndex=0; chunkIndex<numChunks; chunkIndex++)
		{
		   chunkIndexes[chunkIndex] = chunkIndex;
		   chunks[chunkIndex].forward = false;
		}
	break;
	// !!!!!!!! don't forget to update NUM_REORDER_TYPES if adding a new type
	default:
	break;
	}
}

/**
 * Calculates and returns the sample value to be used, given the index and its 
 * position within min/max, applying the appropriate fade value if necessary.
 */
int32_t calcSampleValue(const int32_t rawValue, const uint32_t index, const uint32_t minIndex, const uint32_t maxIndex)
{
	// 2147483632 is a gain of 1
	static const uint32_t NUM_FADE_VALUES = 192;
	static const uint32_t FADE_VALUES[NUM_FADE_VALUES] = {
	0, 11184811, 22369621, 33554432, 44739242, 55924053, 67108864, 78293674, 89478485, 100663295, 111848106, 123032916, 134217727, 145402538, 156587348, 167772159, 
	178956969, 190141780, 201326591, 212511401, 223696212, 234881022, 246065833, 257250643, 268435454, 279620265, 290805075, 301989886, 313174696, 324359507, 335544318, 
	346729128, 357913939, 369098749, 380283560, 391468370, 402653181, 413837992, 425022802, 436207613, 447392423, 458577234, 469762045, 480946855, 492131666, 503316476, 
	514501287, 525686097, 536870908, 548055719, 559240529, 570425340, 581610150, 592794961, 603979772, 615164582, 626349393, 637534203, 648719014, 659903824, 671088635, 
	682273446, 693458256, 704643067, 715827877, 727012688, 738197499, 749382309, 760567120, 771751930, 782936741, 794121551, 805306362, 816491173, 827675983, 838860794, 
	850045604, 861230415, 872415226, 883600036, 894784847, 905969657, 917154468, 928339278, 939524089, 950708900, 961893710, 973078521, 984263331, 995448142, 1006632953, 
	1017817763, 1029002574, 1040187384, 1051372195, 1062557005, 1073741816, 1084926627, 1096111437, 1107296248, 1118481058, 1129665869, 1140850680, 1152035490, 1163220301, 
	1174405111, 1185589922, 1196774732, 1207959543, 1219144354, 1230329164, 1241513975, 1252698785, 1263883596, 1275068407, 1286253217, 1297438028, 1308622838, 1319807649, 
	1330992459, 1342177270, 1353362081, 1364546891, 1375731702, 1386916512, 1398101323, 1409286134, 1420470944, 1431655755, 1442840565, 1454025376, 1465210186, 1476394997, 
	1487579808, 1498764618, 1509949429, 1521134239, 1532319050, 1543503861, 1554688671, 1565873482, 1577058292, 1588243103, 1599427913, 1610612724, 1621797535, 1632982345, 
	1644167156, 1655351966, 1666536777, 1677721588, 1688906398, 1700091209, 1711276019, 1722460830, 1733645640, 1744830451, 1756015262, 1767200072, 1778384883, 1789569693, 
	1800754504, 1811939315, 1823124125, 1834308936, 1845493746, 1856678557, 1867863367, 1879048178, 1890232989, 1901417799, 1912602610, 1923787420, 1934972231, 1946157042, 
	1957341852, 1968526663, 1979711473, 1990896284, 2002081094, 2013265905, 2024450716, 2035635526, 2046820337, 2058005147, 2069189958, 2080374769, 2091559579, 2102744390, 
	2113929200, 2125114011, 2136298821 };

	if (index < minIndex + NUM_FADE_VALUES)
		return __SSAT(___SMMUL(FADE_VALUES[index-minIndex],__SSAT(rawValue,28))<<1,28);
	else if (index > maxIndex - NUM_FADE_VALUES)
		return __SSAT(___SMMUL(FADE_VALUES[maxIndex-index],__SSAT(rawValue,28))<<1,28);
	else
		return rawValue;
}]]></code.declaration>
      <code.init><![CDATA[static int32_t _array[SAMPLE_ARRAY_LENGTH] __attribute__ ((section (".sdram")));
sampleArray = &_array[0];

clearSampleArray();

sampleWriteIndex = 0;
currentChunkIndex = 0;
currentSampleIndex = 0;
sampleEndIndex = 0;

numChunksSelected = MAX_CHUNKS; // all of them for now
chunkLengthSelected = SAMPLE_ARRAY_LENGTH/numChunksSelected; // simple for now

reorderType = 5;

state = INIT;
event = NONE;

LogTextMessage("Init MAX_SAMPLE_TIME_S %u\n", MAX_SAMPLE_TIME_S);

srand(0);

//LogTextMessage("rand %d\n", rand() % 2);]]></code.init>
      <code.krate><![CDATA[if (inlet_reset && state != RESET)
{
	//LogTextMessage("RESET\n");
	event = CLEAR;
}
else if (inlet_trigger && state == RESET)
{
	//LogTextMessage("START_RECORDING\n");
	event = START_RECORDING;
}
else if (inlet_trigger && state == RECORDING)
{
	//LogTextMessage("STOP\n");
	event = STOP;
}
else if (inlet_trigger && state == PLAYING)
{
	//LogTextMessage("CLEAR\n");
	event = CLEAR;
}]]></code.krate>
      <code.srate><![CDATA[switch (state)
{
	case INIT: // entered only once on startup
		state = RESET;
	break;
	case RESET: // wait to start recording
		switch (event)
		{
			case START_RECORDING:
				state = RECORDING;
				sampleWriteIndex = 0;
				sampleEndIndex = sampleWriteIndex;
			break;
			case STOP: // stop and clear handled together
			case CLEAR:
				// ignore
			break;
			case NONE:
				outlet_out = 0; // no output
			break;
		}
	break;
	case RECORDING: // record until full then play
	{
		bool prepareChunks = false;
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case STOP:
				if (sampleWriteIndex >= MIN_SAMPLES) // got enough
				{
					state = PLAYING;
					prepareChunks = true;
				}
				else // cancel recording
				{
					state = RESET;
				}
			break;
			case CLEAR:
				state = RESET;
				//clearArray();
			break;
			case NONE:
				sampleArray[sampleWriteIndex] = inlet_in;
				sampleEndIndex = sampleWriteIndex;
				outlet_out = 0; // no output
				++sampleWriteIndex;
				
				if (sampleWriteIndex >= SAMPLE_ARRAY_LENGTH) // run out of sample space, start playing
				{
					LogTextMessage("too many samples\n");
					state = PLAYING; // go to this state directly
					prepareChunks = true;
				}
			break;
		}
		
		if (prepareChunks)
		{
			// init sample and chunk indexes etc.
			if (inlet_numChunks > 0 && inlet_numChunks <= MAX_CHUNKS)
				numChunksSelected = inlet_numChunks;
			else
				numChunksSelected = inlet_numChunks;
			chunkLengthSelected = sampleEndIndex/numChunksSelected;
			populateChunks(numChunksSelected, chunkLengthSelected);
			if (inlet_type > 0 && inlet_type <= NUM_REORDER_TYPES)
				reorderType = inlet_type;
			else
				reorderType = 5;
			reorderChunks(numChunksSelected, reorderType);
			currentChunkIndex = 0;
			currentSampleIndex = chunks[chunkIndexes[currentChunkIndex]].forward ? chunks[chunkIndexes[currentChunkIndex]].startIndex : chunks[chunkIndexes[currentChunkIndex]].endIndex;
//					LogTextMessage("starting playback chunk %u fwd %d start %u end %u sample %u\n",
//						chunkIndexes[currentChunkIndex],
//						chunks[chunkIndexes[currentChunkIndex]].forward,
//						chunks[chunkIndexes[currentChunkIndex]].startIndex,
//						chunks[chunkIndexes[currentChunkIndex]].endIndex,
//						currentSampleIndex);
		}
	}
	break;
	case PLAYING: // keep playing until stopped
		switch (event)
		{
			case START_RECORDING:
				// ignore
			break;
			case STOP: // stop and clear handled together
			case CLEAR:
				state = RESET;
				outlet_playing = 0;
			break;
			case NONE:

				// get current sample value, move to next one, check for end and repeat

				outlet_out = calcSampleValue(sampleArray[currentSampleIndex], 
			            currentSampleIndex, 
			            chunks[chunkIndexes[currentChunkIndex]].startIndex, 
			            chunks[chunkIndexes[currentChunkIndex]].endIndex);
			
				if (chunks[chunkIndexes[currentChunkIndex]].forward)
				{
				  currentSampleIndex++;
				  if (currentSampleIndex > chunks[chunkIndexes[currentChunkIndex]].endIndex) // finished this chunk
				  {
				      LogTextMessage("Finished forward chunk %u\n", chunkIndexes[currentChunkIndex]);
				      currentChunkIndex++;
				      if (currentChunkIndex >= numChunksSelected)
				      {
				      	reorderChunks(numChunksSelected, reorderType);
				          currentChunkIndex = 0;
				      }
				      currentSampleIndex = chunks[chunkIndexes[currentChunkIndex]].forward ? chunks[chunkIndexes[currentChunkIndex]].startIndex : chunks[chunkIndexes[currentChunkIndex]].endIndex;
				  }
				}
				else // reverse
				{
				  currentSampleIndex--;
				  if (currentSampleIndex < chunks[chunkIndexes[currentChunkIndex]].startIndex  // finished this chunk
				  	|| currentSampleIndex >= sampleEndIndex) // decremented from 0 in first chunk
				  {
				      LogTextMessage("Finished reverse chunk %u\n", chunkIndexes[currentChunkIndex]);
				      currentChunkIndex++;
				      if (currentChunkIndex >= numChunksSelected)
				      {
				      	reorderChunks(numChunksSelected, reorderType);
				          currentChunkIndex = 0;
				      }
				      currentSampleIndex = chunks[chunkIndexes[currentChunkIndex]].forward ? chunks[chunkIndexes[currentChunkIndex]].startIndex : chunks[chunkIndexes[currentChunkIndex]].endIndex;
				  }
				}
			break;
		}
	break;
}

// consume the event
event = NONE;

// update the displays and output flags
switch (state)
{
	case INIT: // shouldn't happen, we go straight to reset
		outlet_recording = 0;
		disp_recording = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_reset = 1;
	break;
	case RESET:
		outlet_recording = 0;
		disp_recording = 0;
		outlet_playing = 0;
		disp_playing = 0;
		disp_reset = 1;
	break;
	case RECORDING:
		outlet_recording = 1;
		disp_recording = 1;
		outlet_playing = 0;
		disp_playing = 0;
		disp_reset = 0;
	break;
	case PLAYING:
		outlet_recording = 0;
		disp_recording = 0;
		outlet_playing = 1;
		disp_playing = 1;
		disp_reset = 0;
	break;
}]]></code.srate>
   </obj.normal>
</objdefs>